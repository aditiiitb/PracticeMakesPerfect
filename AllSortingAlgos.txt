Algorithms
=============
Q. Write Insertion sort, merge sort, quicksort, heapsort, bubblesort, selectionsort, bucketsort

A.

InsertionSort
Algo : foreach index, find the correct place for that index in the array till that index. Invariant is that in every loop, the number of sorted elements keeps growing by 1.

Time Complexity : O(n^2)
Space complexity : O(1) - in place sorting

Code :
// Sorts array in place
public void InsertionSort (int[] A, int n) // A is 0 to n
{
	for (int i = 1; i < A.Length; i++)
{
		int key = A[i];
		for (int j = i-1 ; j >= 0 ; j--)
		{
			if (A[j] > key) // number is larger, move it ahead in the array
			{
				A[j+1] = A[j];
			}
			else // found the proper place for this key
			{
break;
}
}
A[j+1] = key;
}
}




MergeSort
Algo : if size of array is 1, return. Else, sort both halves of array separately. merge them.

Time and Space :
O (nlogn) and O(n) space. 

Code:
// passed with A, 0, A.length - 1 
public void MergeSort(int[] A, int start, int end) 
{
	if (end==start)
		return;
	MergeSort(int[] A, start, (start+end)/2);
	MergeSort(int[] A, (start+end)/2 + 1, end);
	Merge(int[] A, start, (start+end)/2 , end);
}

private void Merge(int[] A, start, mid, end)
{
	int lcount = (mid - start + 1);
	int rcount = (end - mid);
	int[] L = new int[lcount + 1];
	int[] R = new int[rcount + 1];
	Copy(A,L, start, mid);
	Copy(A, L, mid+1, end);
	L[lcount] = int.max; // sentinel node to make comparison easier
	R[rcount] = int.max;

	int lindex = 0, rindex = 0;
	for (int index = start; index <= end ; index++)
	{
		if (L[lindex] < R[rindex])
		{
			A[index] = L[lindex];
			lindex++;
}
else 
{
	A[index] = R[rindex];
	rindex++;
}	
}
return;
}



QuickSort
Algo : Pick an element and assign it to its rightful place in the whole array. Do similarly with right and left arrays.

Complexity :
O(nlogn) expected case, worst case O(n^2) (in reverse order ?)

Code:
public void QuickSort(int[] A, int start, int end) // passed with A, 0, A.length-1
{
	if (start <  end)
{
		int p = Partition(A, start, end);
	QuickSort(A, start, p);
		QuickSort(A, p, end);
}
}

private int Partition(int[] A, int start, int end) 
{
	if (start == end)
		return;
	
int key = A[end];
int partitionIndex = start;

	for (int i = start; i<=end-1; i++)
	{
		if (A[i] < key) 
// this element needs to be pushed to the partitionIndex
		{
			Swap(A, partitionIndex, i);
			partitionIndex++;
		}
	}
	Swap(A, partitionIndex, end);
	return partitionIndex;
}


SelectionSort
Algo: Select the smallest element and put it in front of the array. do same for rest of array.


Code:
private static void SelectionSort(int[] A, int start, int end)
        {
            if (start < end)
            {
                int minSoFar = int.MaxValue;
                int minIndex = 0;
                for (int i = start; i <= end; i++)
                {
                    if (A[i] < minSoFar)
                    {
                        minSoFar = A[i];
                        minIndex = i;
                    }
                }
                Swap(A, start, minIndex);
                SelectionSort(A, start + 1, end);
            }
        }



BubbleSort
Algo: Exchange adjacent elements if in wrong order in every loop. at the end of the loop, largest element is at the end. repeat for whole array except last element. 

Code :

   public static void BubbleSort(int[] A, int start, int end)
        {
            if (start < end)
            {
                for (int i = start; i <= end - 1; i++)
                {
                    if (A[i] > A[i+1])
                        Swap(A, i, i+1);
                }
                BubbleSort(A, start, end - 1);
            }
        }


HeapSort
Algo: Builds a max heap of the array and exchanges the top element with last element. Repeat for rest of array except last element.

Code:
  public static void MyHeapSort(int[] A, int start, int end)
        {
            BuildMaxHeap(A, start, end);
            int heapsize = A.Length;
            for (int i = A.Length - 1; i > 0; i--)
            {
                Swap(A, start, i);
                heapsize--;
                MaxHeapify(A, start, heapsize);
            }
        }

        
        public static void BuildMaxHeap(int[] A, int start, int end)
        {
            for (int i = (end - start)/2; i >= start; i--)
            {
                MaxHeapify(A, i, A.Length);
            }
        }

        public static void MaxHeapify(int[] A, int i, int heapsize)
        {
            int lIndex = Left(i);
            int rIndex = Right(i);
            int largest = 0;
            if (lIndex < heapsize && A[i] < A[lIndex])
                largest = lIndex;
            else
            {
                largest = i;
            }
            if (rIndex < heapsize && A[largest] < A[rIndex])
                largest = rIndex;
            
            if (i != largest)
            {
                Swap(A, i, largest);
                MaxHeapify(A, largest, heapsize);
            }
        }

        private static int Left(int i)
        {
            return 2*i;
        }

        private static int Right(int i)
        {
            return 2*i + 1;
        }


BucketSort
Algo:
Place all input into x number of buckets based on some criteria you decide. Sort each bucket and then concatenate. 



